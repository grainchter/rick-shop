{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const slice = createSlice({\n  name: 'user',\n  initialState: {\n    isLoading: true,\n    data: {}\n  },\n  reducers: {\n    fetchUser: () => ({\n      isLoading: true\n    }),\n    updateUser: (state, action) => ({\n      isLoading: false,\n      data: action.payload\n    }),\n    removeUser: () => ({\n      isLoading: false,\n      data: {}\n    })\n  }\n});\nexport const {\n  fetchUser,\n  updateUser,\n  removeUser\n} = slice.actions;\nexport const selectUserLoading = state => state.user.isLoading;\nexport const selectUser = state => state.user.data;\nexport const selectLokalID = state => {\n  var _state$user$data;\n\n  return (_state$user$data = state.user.data) === null || _state$user$data === void 0 ? void 0 : _state$user$data.localId;\n};\nexport const getUserUpdateAsync = () => async dispatch => {\n  const idToken = localStorage.getItem('idToken');\n\n  if (idToken) {\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({\n        idToken\n      })\n    };\n    const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyCe-Doqgd0OJ3sCSO6HoxzLr7jA9kZ3_4s', requestOptions).then(res => res.json());\n    console.log(response); //     if (response.hasOwnProperty('error')) {\n    //         localStorage.removeItem('idToken');\n    //         dispatch(removeUser());\n    //     } else {\n    //         dispatch(updateUser(response.users[0]));\n    //         console.log(response.users[0]);\n    //     }\n    // } else {\n    //     dispatch(removeUser());\n  }\n};\nexport const getUserAsync = () => dispatch => {\n  dispatch(fetchUser());\n  dispatch(getUserUpdateAsync());\n};\nexport default slice.reducer;","map":{"version":3,"sources":["C:/Users/user/rick-shop/rick-shop/src/store/user.js"],"names":["createSlice","slice","name","initialState","isLoading","data","reducers","fetchUser","updateUser","state","action","payload","removeUser","actions","selectUserLoading","user","selectUser","selectLokalID","localId","getUserUpdateAsync","dispatch","idToken","localStorage","getItem","requestOptions","method","body","JSON","stringify","response","fetch","then","res","json","console","log","getUserAsync","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,KAAK,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAE,IADD;AAEVC,IAAAA,IAAI,EAAE;AAFI,GAFe;AAM7BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,OAAO;AACdH,MAAAA,SAAS,EAAE;AADG,KAAP,CADL;AAINI,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,MAAoB;AAC5BN,MAAAA,SAAS,EAAE,KADiB;AAE5BC,MAAAA,IAAI,EAAEK,MAAM,CAACC;AAFe,KAApB,CAJN;AAQNC,IAAAA,UAAU,EAAE,OAAO;AACfR,MAAAA,SAAS,EAAE,KADI;AAEfC,MAAAA,IAAI,EAAE;AAFS,KAAP;AARN;AANmB,CAAD,CAAzB;AAsBP,OAAO,MAAM;AAAEE,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBI,EAAAA;AAAzB,IAAwCX,KAAK,CAACY,OAApD;AAEP,OAAO,MAAMC,iBAAiB,GAAGL,KAAK,IAAIA,KAAK,CAACM,IAAN,CAAWX,SAA9C;AACP,OAAO,MAAMY,UAAU,GAAGP,KAAK,IAAIA,KAAK,CAACM,IAAN,CAAWV,IAAvC;AACP,OAAO,MAAMY,aAAa,GAAGR,KAAK;AAAA;;AAAA,6BAAIA,KAAK,CAACM,IAAN,CAAWV,IAAf,qDAAI,iBAAiBa,OAArB;AAAA,CAA3B;AAEP,OAAO,MAAMC,kBAAkB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACxD,QAAMC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAhB;;AACA,MAAIF,OAAJ,EAAa;AACT,UAAMG,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBP,QAAAA;AADiB,OAAf;AAFa,KAAvB;AAOA,UAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,uGAAD,EAA0GN,cAA1G,CAAL,CAA+HO,IAA/H,CAAoIC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA3I,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EATS,CAUb;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACC;AACJ,CAvBM;AAyBP,OAAO,MAAMO,YAAY,GAAG,MAAOhB,QAAD,IAAc;AAC5CA,EAAAA,QAAQ,CAACb,SAAS,EAAV,CAAR;AACAa,EAAAA,QAAQ,CAACD,kBAAkB,EAAnB,CAAR;AAEH,CAJM;AAMP,eAAelB,KAAK,CAACoC,OAArB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const slice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        isLoading: true,\r\n        data: {},\r\n    },\r\n    reducers: {\r\n        fetchUser: () => ({\r\n            isLoading: true,\r\n        }),\r\n        updateUser: (state, action) => ({\r\n            isLoading: false,\r\n            data: action.payload,\r\n        }),\r\n        removeUser: () => ({\r\n            isLoading: false,\r\n            data: {},\r\n        })\r\n    }\r\n\r\n});\r\n\r\nexport const { fetchUser, updateUser, removeUser } = slice.actions;\r\n\r\nexport const selectUserLoading = state => state.user.isLoading;\r\nexport const selectUser = state => state.user.data;\r\nexport const selectLokalID = state => state.user.data?.localId;\r\n\r\nexport const getUserUpdateAsync = () => async (dispatch) => {\r\n    const idToken = localStorage.getItem('idToken');\r\n    if (idToken) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                idToken,\r\n            })\r\n        };\r\n\r\n        const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyCe-Doqgd0OJ3sCSO6HoxzLr7jA9kZ3_4s', requestOptions).then(res => res.json());\r\n        console.log(response);\r\n    //     if (response.hasOwnProperty('error')) {\r\n    //         localStorage.removeItem('idToken');\r\n    //         dispatch(removeUser());\r\n    //     } else {\r\n    //         dispatch(updateUser(response.users[0]));\r\n    //         console.log(response.users[0]);\r\n    //     }\r\n\r\n    // } else {\r\n    //     dispatch(removeUser());\r\n    }\r\n}\r\n\r\nexport const getUserAsync = () => (dispatch) => {\r\n    dispatch(fetchUser());\r\n    dispatch(getUserUpdateAsync());\r\n\r\n}\r\n\r\nexport default slice.reducer;"]},"metadata":{},"sourceType":"module"}